---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import AboutTheAuthor from '../components/widgets/AboutTheAuthor.astro';
import TableOfContent from '../components/widgets/TableOfContent.astro';
import { loadEnv } from 'vite';

const { GISCUS_REPO, GISCUS_REPO_ID, GISCUS_CATEGORY, GISCUS_CATEGORY_ID } = loadEnv(process.env.NODE_ENV || 'production', process.cwd(), '');

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post: any) => ({
		params: { slug: post.slug },
		props: post
	}));
}
type Props = CollectionEntry<'blog'>;
const post = Astro.props;
const {
	data: { title, seoTitle, description, coverImage, pubDate, updatedDate, tags }
} = post;
const { Content, headings } = await post.render();
---

<BaseLayout title={seoTitle || title} description={description} image={coverImage?.src || undefined}>
	<div class='container lg:flex gap-10'>
		<main class='overflow-hidden grow'>
		</main>
    <div class='shrink-0 w-[280px] hidden md:block'>
      <div class='mb-4'>
				<AboutTheAuthor />
			</div>
			<TableOfContent headings={headings} />
		</div>
	</div>
</BaseLayout>

<script async is:inline>
	const anchors = document.querySelectorAll('.prose h2[id], .prose h3[id]');
	const links = document.querySelectorAll('nav.toc ul li a');

	function observeToc() {
		if (typeof anchors != 'undefined' && anchors != null && typeof links != 'undefined' && links != null) {
			let scrollTop = window.scrollY;
			for (const link of links) {
				link.classList.add('border-transparent', 'text-inherit');
				link.classList.remove('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
			}
			for (var i = anchors.length - 1; i >= 0; i--) {
				if (scrollTop > anchors[i].offsetTop - 80) {
					links[i].classList.remove('border-transparent', 'text-inherit');
					links[i].classList.add('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
					break;
				}
			}
		}
	}

	window.addEventListener('scroll', (event) => {
		observeToc(event);
	});
	window.addEventListener('hashchange', (event) => {
		observeToc(event);
	});
</script>
